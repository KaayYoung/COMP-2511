17/04/2018 - Group Meeting

1. who are the intended users: are they novice, intermediate or expert, or all sorts of users (do we even understand what this means?)
All sorts of users (since we can set difficulty to make the game more challenging)
2. what sort of features are basic to the application (i.e. needed by every user)?
Basic interface (Menus, continue, select difficulty, game over screen, help, exit button)
Always have to have >= 1 solutions
3. what sort of features are needed by different categories of users: how can the interface handle seemingly different requirements?
If the difficult increases then increase the number of cars on screen
4. what sort of help or hints (if any) should the system be able to provide to users (and how and when is this help given)?
Base on the current state of the board, highlight the next car to be moved
Help button to display texts (how to play the game)
5. what platforms with what form factors is the system designed to run on?
Runs on PC

Algorithms:
BFS
A*
IDA*

Classes:
Board (size, difficulty, state) - 2d array (Board generator, Board solver, add cars, array2graph)
Car (length, direction, color)
Player (id, score, moves)
Interface (menu, help, hints...)
System (create board, create players, save highscores)

08/05/2018
Interface:
Board (6x6 Grid - 800px x 600px)
Car (Max Width/Height = 3 Blocks, fill with color?)
Buttons (New Game, Restart, Difficulty/Select Stage, Solve, Quit)
Menu (Containing buttons?)
Logic:
Car select: Only 1 car can be selected at a time, once selected, the car can be dragged horizontally/vertically based on itâ€™s attribute
Car collision: A car must stop moving when collided with another car or wall
Grid snapping: A car must snap into blocks closest to its position
Restart button will recreate the initial state of that same stage
New Game will generate another random stage
Solve/Hint button will highlight the car that needs to move next
Check for car positions and snap it into grid

09/05/2018
Merge Board and state
Create a simple bfs search
Everything works as intended
todo: add better search algos


Car car1 = new Car(1, 3, 3, 2, 0);
		Car car2 = new Car(2, 3, 2, 3, 1);
		Car car3 = new Car(3, 1, 3, 2, 0);
		Car car4 = new Car(4, 3, 5, 3, 1);
		Car car5 = new Car(5, 4, 4, 2, 0);
		Car car6 = new Car(6, 6, 3, 3, 1);
		Car car7 = new Car(7, 6, 4, 2, 0);
		Car car8 = new Car(8, 6, 0, 2, 1);
		Car car9 = new Car(9, 5, 1, 2, 0);
		
		HashMap<Integer, Car> cars = new HashMap<Integer, Car>();
		
		cars.put(1, car1);
		cars.put(2, car2);
		cars.put(3, car3);
		cars.put(4, car4);
		cars.put(5, car5);
		cars.put(6, car6);
		cars.put(7, car7);
		cars.put(8, car8);
		cars.put(9, car9);
